/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.17
 * Generated at: 2019-05-16 20:16:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');

String username=request.getParameter("username");
HttpSession httpSession =request.getSession(true);
httpSession.setAttribute("username",username); 
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Multi-User Chat</title>\n");
      out.write("<style type=\"text/css\">\n");
      out.write("body, html {\n");
      out.write("  height: 100%;\n");
      out.write("  margin: 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".bg {\n");
      out.write("  /* The image used */\n");
      out.write("  background-image: url(\"https://cdn.dribbble.com/users/69156/screenshots/2398680/icq_pttrn3.png\");\n");
      out.write("\n");
      out.write("  /* Full height */\n");
      out.write("  height: 100%; \n");
      out.write("\n");
      out.write("  /* Center and scale the image nicely */\n");
      out.write("  background-position: center;\n");
      out.write("  background-repeat: no-repeat;\n");
      out.write("  background-size: cover;\n");
      out.write("}\n");
      out.write("#content {\n");
      out.write("  width: 700px ;\n");
      out.write("  margin-left: auto ;\n");
      out.write("  margin-right: auto ;\n");
      out.write("}\n");
      out.write(".textarea{\n");
      out.write("  background-color: #3CBC8D;\n");
      out.write("  color: white;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".outer-div\n");
      out.write("{\n");
      out.write("     padding: 30px;\n");
      out.write("     text-align: center;\n");
      out.write("}\n");
      out.write(".inner-div\n");
      out.write("{\n");
      out.write("     display: inline-block;\n");
      out.write("     padding: 50px;\n");
      out.write("}\n");
      out.write(".button {\n");
      out.write("  background-color: #f44336; /* Green */\n");
      out.write("  color: white;\n");
      out.write("  padding: 10px 25px;\n");
      out.write("  text-align: center;\n");
      out.write("  font-size: 13px;\n");
      out.write("  cursor: pointer;\n");
      out.write("  border-width: 0px;\n");
      out.write("}\n");
      out.write(".div \n");
      out.write("{ background: #f44336; \n");
      out.write("overflow: hidden; \n");
      out.write("}\n");
      out.write("input[type=text] {\n");
      out.write("  width: 85%;\n");
      out.write("  padding: 10px 20px;\n");
      out.write("  margin: 8px 0;\n");
      out.write("  border-width: 0px;\n");
      out.write("  box-sizing: border-box;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
if(username!=null) { 
      out.write("\n");
      out.write("<div class=\"bg\">\n");
      out.write("<div class=\"outer-div\">\n");
      out.write("<div class=\"inner-div\">\n");
      out.write("<div><h2>Welcome to Chat-Room</h2></div>\n");
      out.write("<div class=\"div\">\n");
      out.write("<mark><font size=\"6\">Username:");
      out.print(username );
      out.write("</font></mark><br>\n");
      out.write("</div>\n");
      out.write("<textarea id=\"messagesTextArea\"  class=\"textarea\" readonly=\"readonly\" rows=\"20\" cols=\"70\"></textarea>\n");
      out.write("<br>\n");
      out.write("<div>\n");
      out.write("<input type=\"text\" placeholder=\"Type your message here...\" id=\"messageText\" size=\"30\"/>\n");
      out.write("<input type=\"button\"  class=\"button\" id=\"myBtn\" value=\"Send\" onclick=\"sendMessage();\"/>\n");
      out.write("</div>\n");
      out.write("</div>\n");
      out.write("</div>\n");
      out.write("</div>\n");
      out.write("<script>\n");
      out.write("var websocket=new WebSocket(\"ws:localhost:8080/Chat/chatRoomServerEndpoint\");\n");
      out.write("websocket.onmessage=function processMessage(message) {\n");
      out.write("\tvar jsonData=JSON.parse(message.data);\n");
      out.write("\tif (jsonData.message!=null) messagesTextArea.value+= jsonData.message + \"\\n\";\n");
      out.write("}\n");
      out.write("function sendMessage() {\n");
      out.write("\twebsocket.send(messageText.value);\n");
      out.write("\tmessageText.value=\"\";\n");
      out.write("}\n");
      out.write("var input = document.getElementById(\"messageText\");\n");
      out.write("input.addEventListener(\"keyup\", function(event) {\n");
      out.write("  if (event.keyCode === 13) {\n");
      out.write("   event.preventDefault();\n");
      out.write("   document.getElementById(\"myBtn\").click();\n");
      out.write("  }\n");
      out.write("});\n");
      out.write("</script>\n");
} 
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
